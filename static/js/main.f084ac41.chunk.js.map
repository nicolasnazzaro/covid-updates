{"version":3,"sources":["components/cards/cards.module.css","api/agent.js","components/countryPicker/CountryPicker.js","components/cards/Cards.js","components/chart/Chart.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js","components/countryPicker/countryPicker.module.css","components/chart/chart.module.css","App.module.css","components/footer/footer.module.css"],"names":["module","exports","URL","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","neededData","console","log","fetchChartData","filteredData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","setCountries","useEffect","getCountries","FormControl","className","styles","formControl","NativeSelect","default","onChange","e","target","value","i","key","Cards","setData","selectedCountry","setSelectedCountry","setFetchedData","pickerContainer","style","marginRight","Grid","container","spacig","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Chart","then","response","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","d","length","Footer","footer","Link","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f084ac41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__2nAh3\",\"pickerContainer\":\"cards_pickerContainer__1maKw\",\"card\":\"cards_card__1CqLb\",\"infected\":\"cards_infected__281pr\",\"recovered\":\"cards_recovered__26Qnc\",\"deaths\":\"cards_deaths__lYVzI\"};","import axios from 'axios';\n\nconst URL = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = URL;\n    \n    if (country) {\n        changeableUrl = `${URL}/countries/${country}`;\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n        const neededData = {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate\n        }\n        return neededData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchChartData = async () => {\n    try {\n        const { data } = await axios.get(`${URL}/daily`);\n        const filteredData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n        return filteredData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data } = await axios.get(`${URL}/countries`);\n        return data.countries.map(country => country.name);\n    } catch (error) {\n        console.log(error)\n    }\n}","import React, { useState, useEffect, Fragment } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './countryPicker.module.css';\nimport { fetchCountries } from '../../api/agent';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    \n    const [countries, setCountries] = useState([]);\n\n    useEffect(() => {\n        const getCountries = async () => {\n            setCountries(await fetchCountries());\n        }\n        getCountries();\n    }, [setCountries]);\n\n    return (\n        <Fragment>\n            <FormControl className={styles.formControl}>\n                <NativeSelect default='' onChange={e => handleCountryChange(e.target.value)}>\n                    <option value=''>All</option>\n                    {countries.map((country, i) => \n                        <option key={i} value={country}>{country}</option>\n                    )}\n                </NativeSelect>\n            </FormControl>\n        </Fragment>\n    );\n}\n\nexport default CountryPicker;","import React, { useState, useEffect, Fragment } from 'react';\nimport { fetchData } from '../../api/agent';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountryPicker from '../countryPicker/CountryPicker';\nimport CountUp from 'react-countup';\nimport styles from './cards.module.css';\nimport cx from 'classnames';\n\nconst Cards = () => {\n\n    const [data, setData] = useState({});\n    const [selectedCountry, setSelectedCountry] = useState('');\n\n    useEffect(() => {\n        const setFetchedData = async () => {\n            setData(await fetchData(selectedCountry));\n        }\n        setFetchedData();\n    }, [selectedCountry]);\n\n    const handleCountryChange = async (country) => {\n        setSelectedCountry(country);\n    }\n\n    if (!data.confirmed) return <p>Loading cards...</p>;\n\n    return (\n        <Fragment>\n            <div className={styles.pickerContainer}>\n                <h3 style={{marginRight: 20}}>By country:</h3>\n                <CountryPicker handleCountryChange={handleCountryChange}/>\n            </div>\n            <Grid container spacig={3} justify='center' className={styles.container}>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\n                        <Typography variant='h5'>\n                            <CountUp\n                                start={0}\n                                end={data.confirmed?.value}\n                                duration={1.5}\n                                separator=','\n                            />    \n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of active cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n                        <Typography variant='h5'>\n                        <CountUp\n                                start={0}\n                                end={data.recovered?.value}\n                                duration={1.5}\n                                separator=','\n                            /> \n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of recovered</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n                        <Typography variant='h5'>\n                        <CountUp\n                                start={0}\n                                end={data.deaths?.value}\n                                duration={1.5}\n                                separator=','\n                            /> \n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(data.lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of deaths</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </Fragment>\n    );\n}\n\nexport default Cards;","import React, { useState, useEffect } from 'react';\nimport { fetchChartData } from '../../api/agent';\nimport { Line } from 'react-chartjs-2';\nimport styles from './chart.module.css';\n\nconst Chart = () => {\n    \n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        fetchChartData().then(response => setData(response));\n    }, []);\n    \n    const lineChart = (\n        <Line\n            data={{\n                labels: data.map(({date}) => date),\n                datasets: [{\n                    data: data.map(({confirmed}) => confirmed),\n                    label: 'Total Infected',\n                    borderColor: '#3333ff',\n                    fill: true\n                }, {\n                    data: data.map(({deaths}) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.1)',\n                    fill: true\n                }, {\n                    data: data.map((d, i) => {\n                        let value;\n                        if (i>0) {\n                            value = data[i].confirmed - data[i-1].confirmed\n                        }\n                        return value;\n                    }),\n                    label: 'Infected daily increment',\n                    borderColor: 'yellow',\n                    backgroundColor: 'rgba(255, 255, 125, 0.1)',\n                    fill: true\n                }]\n            }}\n        />\n    );\n\n    return (\n        <div className={styles.container}>\n            <h3>Global Overview</h3>\n            {!data.length \n                ? (<p>Loading chart...</p>)\n                : lineChart\n            }\n        </div>\n    );\n}\n\nexport default Chart;","import React from 'react';\nimport styles from './footer.module.css';\nimport { Typography, Link } from '@material-ui/core';\n\nconst Footer = () => {\n    return (\n        <footer className={styles.footer}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n                {'Data retrieved from '}\n                <Link color=\"inherit\" href=\"https://covid19.mathdro.id/api\">\n                https://covid19.mathdro.id/api\n                </Link>\n            </Typography>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Cards from './components/cards/Cards';\nimport Chart from './components/chart/Chart';\nimport styles from './App.module.css';\nimport Footer from './components/footer/Footer';\n\n\n\nconst App = () => {\n  return (\n    <div className={styles.container}>\n      <h2>Covid-19 Updates</h2>\n      <Chart/>\n      <Cards/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countryPicker_formControl__1V_Hl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__3lAJl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__1lZIc\"};"],"sourceRoot":""}